#!/bin/bash

# Script para deploy no Render
# Uso: ./scripts/deploy-render.sh

set -e

echo "üöÄ Iniciando deploy no Render..."

# Verificar se estamos no diret√≥rio correto
if [ ! -f "package.json" ] || [ ! -f "server/package.json" ]; then
    echo "‚ùå Erro: Execute este script na raiz do projeto"
    exit 1
fi

# Verificar se o git est√° configurado
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo "‚ùå Erro: Este diret√≥rio n√£o √© um reposit√≥rio git"
    exit 1
fi

# Verificar se h√° mudan√ßas n√£o commitadas
if [ -n "$(git status --porcelain)" ]; then
    echo "‚ö†Ô∏è  Aviso: H√° mudan√ßas n√£o commitadas no reposit√≥rio"
    echo "Recomendamos commitar todas as mudan√ßas antes do deploy"
    read -p "Deseja continuar mesmo assim? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# Verificar se o render.yaml existe
if [ ! -f "render.yaml" ]; then
    echo "‚ùå Erro: Arquivo render.yaml n√£o encontrado"
    exit 1
fi

echo "üìã Verificando configura√ß√£o do Render..."

# Validar render.yaml (verifica√ß√£o b√°sica)
if ! grep -q "brevly-server" render.yaml; then
    echo "‚ùå Erro: Configura√ß√£o do servi√ßo n√£o encontrada no render.yaml"
    exit 1
fi

if ! grep -q "runtime: docker" render.yaml; then
    echo "‚ùå Erro: Configura√ß√£o Docker n√£o encontrada no render.yaml"
    exit 1
fi

echo "‚úÖ Configura√ß√£o do Render v√°lida!"

# Verificar se o Dockerfile existe
if [ ! -f "server/Dockerfile" ]; then
    echo "‚ùå Erro: Dockerfile n√£o encontrado em server/Dockerfile"
    exit 1
fi

echo "üê≥ Dockerfile encontrado!"

# Verificar se a pipeline CI existe
if [ ! -f ".github/workflows/ci.yml" ]; then
    echo "‚ö†Ô∏è  Aviso: Pipeline CI n√£o encontrada em .github/workflows/ci.yml"
    echo "O deploy pode n√£o funcionar corretamente"
else
    echo "‚úÖ Pipeline CI encontrada!"
fi

# Verificar configura√ß√£o de ambiente
echo "üîç Verificando configura√ß√£o de ambiente..."

if grep -q "getDatabaseConfig" server/src/env.ts; then
    echo "‚úÖ Detec√ß√£o autom√°tica de ambiente configurada!"
    echo "   - Desenvolvimento: PostgreSQL local (Docker)"
    echo "   - Produ√ß√£o: Neon Database"
else
    echo "‚ö†Ô∏è  Aviso: Detec√ß√£o autom√°tica de ambiente n√£o encontrada"
fi

# Instru√ß√µes finais
echo ""
echo "üéâ Prepara√ß√£o conclu√≠da!"
echo ""
echo "üìù Pr√≥ximos passos:"
echo "1. Fa√ßa push das mudan√ßas para o GitHub:"
echo "   git add ."
echo "   git commit -m 'feat: prepare for render deployment'"
echo "   git push origin main"
echo ""
echo "2. O GitHub Actions ir√° executar automaticamente:"
echo "   ‚úÖ Testes unit√°rios e E2E"
echo "   ‚úÖ Build da imagem Docker"
echo "   ‚úÖ Push para Docker Hub"
echo ""
echo "3. Configure o servi√ßo no Render Dashboard:"
echo "   https://dashboard.render.com"
echo "   - Crie um novo Web Service"
echo "   - Conecte seu reposit√≥rio GitHub"
echo "   - Use o arquivo render.yaml para configura√ß√£o"
echo ""
echo "4. Configure as vari√°veis de ambiente no Render:"
echo "   # Configura√ß√µes obrigat√≥rias:"
echo "   NODE_ENV=production"
echo "   PORT=10000"
echo "   DATABASE_URL=postgresql://... (Neon Database)"
echo "   POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_DB"
echo "   CLOUDFLARE_ACCOUNT_ID, CLOUDFLARE_ACCESS_KEY_ID, etc."
echo ""
echo "5. O Render ir√° fazer deploy automaticamente ap√≥s o push"
echo ""
echo "üìö Documenta√ß√£o:"
echo "   - RENDER_DOCKER.md - Instru√ß√µes detalhadas de deploy"
echo "   - NEON_INTEGRATION.md - Configura√ß√£o do banco Neon"
echo "   - ENV_DEVELOPMENT.md - Configura√ß√£o de desenvolvimento local" 